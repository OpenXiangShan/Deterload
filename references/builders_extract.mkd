<arg>cores</arg>: Number of cores.
* **Type**: number-in-string
* **Default value**: `"1"`
* **Available values**: `"1"`, `"2"`.
  ([LibCheckpoint](https://github.com/OpenXiangShan/LibCheckpoint) is still in development,
  its stable configuration current only supports dual core)
* **Note**: `cpt-simulator`: qemu supports multiple cores, however, nemu only supports single core.

<arg>cpt-maxK</arg>: maxK value for all benchmarks in checkpoint generation.
* **Type**: number-in-string
* **Default value**: `"30"`
* **Description**:
  maxK is a parameter in SimPoint algorithm used during the checkpoint's clustering stage.
  `cpt-maxK` will set maxK for all benchmarks' clustering stage in checkpoints generation.
  To override the maxK for specific benchmarks, refer to the `cpt-maxK-bmk` argument.

<arg>cpt-intervals</arg>: Number of BBV interval instructions in checkpoint generation.
* **Type**: number-in-string
* **Default value**: `"20000000"`

<arg>cpt-simulator</arg>: Simulator used in checkpoint generation.
* **Type**: string
* **Default value**: `"qemu"`
* **Available values**: `"qemu"`, `"nemu"`
* **Note**:
  Though nemu is faster than qemu,

  * nemu does not support multiple cores,
  * the current version of nemu is not deterministic.

  Therefore, qemu is chosen as the default simulator.
  For more information, refer to [OpenXiangShan/Deterload Issue #8: nemu is not deterministic](https://github.com/OpenXiangShan/Deterload/issues/8).

<arg>cpt-format</arg>: Compress format of output checkpoints.
* **Type**: string
* **Default value**: `"zstd"`
* **Available value**: `"zstd"`, `"gz"`
* **Note**: nemu supports both formats; however, qemu only supports zstd format.

<arg>interactive</arg>: The image is interactive.
* **Type**: bool
* **Default value**: `false`
* **Note**: This argument only use together with `-A sim` to debug.

<arg>enableTrap</arg>: Whether to incorporate QEMU/NEMU trap in image.
* **Type**: bool
* **Default value**: `true`

<arg>linuxVersion</arg>: The linux kernel version
* **Type**: string
* **Default value**: `"default"`
* **Available values**: Suffix of any nixpkgs-supported linuxKernel.kernels.linux_<u>xxx</u>.
  To list available linuxKernel.kernels.linux_<u>xxx</u>:
  ```bash
  nix-instantiate --eval -E 'let pkgs=import <nixpkgs> {}; in builtins.filter (x: pkgs.lib.hasPrefix "linux_" x) (builtins.attrNames pkgs.linuxKernel.kernels)'
  ```

<arg>linuxStructuredExtraConfig</arg>: The extra structured linux config
* **Type**: attr (with lib.kernel; {kernelConfigEntry = kernelItem; ...})
* **Note1**:
  The syntax of kernelConfigEntry is the entry available is Kconfig.
  In other words, the CONFIG_XXX with "CONFIG_" removed.
  The syntax of kernelItem is lib.kernel.xxx.
* **Note2**:
  This argument will used to generate linux config file together with riscv64's defconfig
  and built-in configs in builders/imgBuilder/linux/default.nix.
  The generated config file can be accessed by `linux.configfile`.

<arg>linuxKernelPatches</arg>: The linux kernelPatches
* **Type**: list of attrs ([{name = xxx; patch = xxx; extraConfig = xxx;} ...])
* **Default values:**: ./imgBuilder/linux/patches/*.nix
* **Node**:
  The `patch` is a patch file that can be applied by patch executable to linux source code.
  The optional `extraConfig` is linux configs, each line of which is in string form without the CONFIG_ prefix.